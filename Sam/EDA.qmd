---
title: "Crimes - EDA"
author: "Sam Lee"
format: pdf
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggmap)
library(lubridate)
library(jsonlite)

#For zero-inflated Poisson
require(pscl)
require(boot)

maps.api.key = read_file("maps_api.txt")

# https://timeseriesreasoning.com/contents/zero-inflated-poisson-regression-model/
# 
# https://stats.oarc.ucla.edu/r/dae/zip/

crimes <- read_csv("Data/Crimes.csv")
crimes$DateTime <- mdy_hms(crimes$Date)
crimes$Date <- as.Date(crimes$DateTime)
crimes$hour <- hour(crimes$DateTime)

moons <- read_csv("Data/full_moon.csv") %>%
  mutate(Date = dmy(FullMoonDates))

holidays <- read_csv("Data/holidays.csv") %>%
  mutate(Date = ymd(Date))

#Weather from Open-Meteo API
#API Call: https://archive-api.open-meteo.com/v1/archive?latitude=41.881832&longitude=-87.72&start_date=2010-01-01&end_date=2024-02-24&hourly=temperature_2m,relative_humidity_2m,apparent_temperature,rain,snowfall,snow_depth,cloud_cover,wind_speed_10m,wind_gusts_10m,is_day,shortwave_radiation_instant,direct_radiation_instant&timezone=America%2FChicago

weather.data <- fromJSON("Data/weather.json")["hourly"] %>% as.data.frame()
weather.data$hourly.time = weather.data$hourly.time %>% str_replace("T", " ")
weather.data$hourly.time = ymd_hm(weather.data$hourly.time)
weather.data <- weather.data %>%
  mutate(
    Date = as.Date(hourly.time),
    hour = hour(hourly.time) %>%
      as.numeric()
  )
weather.covariates <- colnames(weather.data)[2:(ncol(weather.data)-2)]

cutoff.date = max(
  c(min(crimes$Date), min(holidays$Date), min(weather.data$Date))
)
upper.cutoff = min(
  c(max(crimes$Date), max(holidays$Date), max(weather.data$Date))
)

#weather.data[weather.data %>% dplyr::select(DateTime, hour) %>% duplicated(),]

crimes <- weather.data %>% left_join(crimes) %>%
  mutate(
    DateTime = hourly.time,
    Year = year(DateTime)
  )

week.days <- c("Mon", "Tues", "Wed", "Thurs", "Fri", "Sat", "Sun")

crimes.cleaned <- crimes %>%
  left_join(holidays) %>%
  left_join(moons) %>%
  mutate(
    Holiday = ifelse(is.na(Holiday), "", Holiday),
    DayofWeek = week.days[wday(Date, week_start=1)],
    FullMoon = ifelse(is.na(FullMoonDates),0,1)
  ) %>% filter(
    Date >= cutoff.date & Date <= upper.cutoff
  )
  
factors = c("DateTime", "Date", "Primary Type", "Location Description", "Arrest",
            "Domestic", "Community Area", "Year", "Latitude", "Longitude",
            "FullMoon", "DayofWeek", "Holiday", "hour", weather.covariates)

crimes.cleaned <- crimes.cleaned[,factors]

#In the FBI's Uniform Crime Reporting (UCR) Program, violent crime is composed 
#of four offenses: murder and nonnegligent manslaughter, forcible rape, 
#robbery, and aggravated assault.

#https://www.chicago.gov/city/en/sites/vrd/home/violence-victimization.html
allcrimes = crimes.cleaned$`Primary Type` %>% unique() %>% sort()
violence.key <- c(0,1,1,1,0,1,0,1,0,0,0,1,1,0,1,1,0,0,0,0,
                  0,0,0,0,0,0,0,0,0,0,1,0,0,0,0)
mapping <- setNames(seq_along(unique(allcrimes)), unique(allcrimes))
crimes.cleaned$Violent <- violence.key[unname(mapping[crimes.cleaned$`Primary Type`])]

crimes.cleaned <- crimes.cleaned %>%
  mutate(
    #These are the hours where there weren't any violent crimes 
    Violent = ifelse(is.na(Violent), 0, Violent)
  )

crimes.cleaned <- crimes.cleaned %>% group_by(Violent, Date, hour) %>%
  mutate(
    NumViolentCrimes = Violent*n()
  ) %>% ungroup()



#Assume unemployment rate in Chicago's 11th police district is proportional
#to the unemployment rate in the Chicago area
unem <- read_csv("Data/chicago-unemployment.csv") %>%
  dplyr::select(Year, Label, Value) %>%
  mutate(
    Date = ym(Label),
    Month = month.name[month(Date)]
  ) %>% dplyr::select(-Label) %>% setNames(c(
    "Year", "Unemployment", "Date", "Month"
  )) %>% arrange(Date)

crimes.cleaned$Month <- month.name[month(crimes.cleaned$Date)]

#Add in monthly unemployment
crimes.cleaned <- crimes.cleaned %>%
  left_join(
    unem %>% dplyr::select(-Date), by=join_by(Year, Month)
  )

write_csv(crimes.cleaned, "crimes_cleaned.csv")
```

```{r fig.width=12, fig.height=8, message=F, warning=F, echo=F}

register_google(key=maps.api.key)
chicago_map <- get_map(location = c(lon=-87.72, lat = 41.881832),
                       zoom = 13)

ggmap(chicago_map) +
  geom_point(data = filter(crimes.cleaned, Year==2023),
             aes(x = Longitude, y = Latitude, color=as.factor(Violent)),
             alpha=0.2) +
  labs(title = "Crimes in District 11 During 2023")


marginal_crimes <- function(df, year=2023){
  df %>% filter(Year %in% year) %>%
    group_by(Date) %>%
    summarize(
      n_crimes = n(),
      n_violent = sum(Violent),
    ) %>%
    ggplot()+
    geom_line(aes(x=Date, y=n_violent), color="red")+
    labs(
      x="Date",
      y="# of Daily Violent Crimes"
    )+
    theme_minimal()
}
marginal_crimes(crimes.cleaned, year=2023)

#This is why we should use a zero-inflated poisson
#crimes.cleaned$NumViolentCrimes %>% hist(main="Distribution of Violent Crimes by Hour")

crimes.cleaned %>% ggplot()+
  geom_histogram(aes(x=NumViolentCrimes), binwidth=1, fill="darkblue", alpha=0.75)+
  scale_x_continuous(breaks=0:8)+
  labs(
    x="Number of Violent Crimes per Hour",
    y="Frequency"
  )+
  theme_minimal()

unem %>% ggplot(aes(x=Date, y=Unemployment))+
  geom_point()+
  geom_line()+
  theme_minimal()+
  geom_smooth(method="gam")

```

<!-- Multivariate regression on location -->

<!-- ```{r} -->
<!-- crimes.mvlm <- lm(cbind(Longitude, Latitude, NumViolentCrimes) ~ hour + DayofWeek, -->
<!--                     data=crimes.cleaned) -->
<!-- new_data <- expand.grid("hour" = unique(crimes.cleaned$hour), -->
<!--                        "DayofWeek" = "Mon") -->
<!-- predictions <- cbind(new_data, predict(crimes.mvlm, newdata = new_data)) -->

<!-- ggmap(chicago_map) + -->
<!--   geom_point(data = predictions, -->
<!--              aes(x = Longitude, y = Latitude, color=hour), alpha=0.2) + -->
<!--   labs(title = "Crimes in District 11 During 2023") -->
<!-- ``` -->

```{r fig.height=6}
load("model_zeroinf.RData")

coefficients <- coef(summary(model.zeroinf))$count %>% as.matrix()

effects = c("Full Moon", "Day Time", "Temperature", "Rain", "Unemployment", "New Year's Day", "Snowfall", "Wind Gusts",
            "Cloud Cover")

# Create a data frame for plotting
plot_data <- data.frame(
  term = rownames(coefficients),
  estimate = coefficients[,1],
  ci_low = coefficients[,1] - 1.96 * coefficients[,2],
  ci_high = coefficients[,1] + 1.96 * coefficients[,2],
  significance = ifelse(coefficients[,4] < 0.05, "Significant", "Not Significant")
)

plot_data$term =c("Intercept", "Full Moon", "Day Time", "Unemployment", "Christmas Day", "Christmas Eve", "Columbus Day", "Halloween",
  "Independence Day", "Labor Day", "MLK Jr. Day", "Memorial Day", "New Year's Day", "NYE", "President's Day", "St. Patrick's Day",
  "Thanksgiving Day", "Valentine's Day", "Veterans Day", "Year", "Year^2", "Year^3", "April", "August", "December", "February",
  "July", "June", "March", "May", "November", "October", "September", "Mon", "Sat", "Sun", "Thurs", "Tues", "Wed", "12:00 a.m.", "1:00 a.m.", "2:00 a.m.", "3:00 a.m.", "4:00 a.m.", "5:00 a.m.", "6:00 a.m.", "7:00 a.m.", "8:00 a.m.", "9:00 a.m.", "10 a.m.", "11:00 a.m.", "12:00 p.m.", "1:00 p.m.", "2:00 p.m.", "3:00 p.m.", "4:00 p.m.", "5:00 p.m.", "6:00 p.m.", "7:00 p.m.", "9:00 p.m.", "10:00 p.m.", "11:00 p.m.", "Temperature", "Relative Humidity", "Rain (in.)", "Snowfall (mm.)", "Snowdepth", "Cloud Cover", "Wind Gusts", "Solar Radiation", str_c("Previous ", 1:24, "-hour Violent Crimes"), "Full Moon and Day Time", str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 12:00 a.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 1:00 a.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 2:00 a.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 3:00 a.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 4:00 a.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 5:00 a.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 6:00 a.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 7:00 a.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 8:00 a.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 9:00 a.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 10:00 a.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 11:00 a.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 12:00 p.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 1:00 p.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 2:00 p.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 3:00 p.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 4:00 p.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 5:00 p.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 6:00 p.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 7:00 p.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 9:00 p.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 10:00 p.m."), str_c(c("Mon", "Sat", "Sun", "Thurs", "Tues", "Wed"), " at 11:00 p.m."))

plot_data <- plot_data %>% filter(str_detect(term, paste(effects, collapse = "|"))) %>%
  arrange(desc(estimate))

# plot_data <- plot_data %>% arrange(desc(abs(estimate))) %>% head(30)

# Plot
ggplot(plot_data, aes(x = reorder(term, estimate), y = estimate, ymin = ci_low, ymax = ci_high)) +
  geom_pointrange(aes(color = significance), size = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5) +
  coord_flip() +
  theme_minimal() +
  theme(legend.position = "top") +
  labs(x = "Coefficient", y = "Estimate", title = "Caterpillar Plot of Coefficients") +
  scale_color_manual(values = c("green" = "darkblue", "red" = "firebrick"),
                     labels = c("Significant", "Not Significant")) +
  guides(color = guide_legend(title = "Significance")) +
  geom_text(data = plot_data[plot_data$significance == "Significant", ],
            aes(label = round(estimate, 2), y = estimate + 0.3),
            hjust = 0.5, color = "darkblue", size = 3) +
  geom_text(data = plot_data[plot_data$significance == "Not Significant", ],
            aes(label = round(estimate, 2), y = estimate + 0.3),
            hjust = 0.5, color = "firebrick", size = 3)
```